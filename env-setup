#!/bin/bash

# Resolve architecture. Note: this is dependent on the graal version
graal_arch="$(uname -m)"

# Override graal_arch when on amd64
if [[ "$graal_arch" == "x86_64" ]] || [[ "$graal_arch" == "x64" ]]
then
  graal_arch="x64"
fi


graal_ver="23.0.2"
graal_os="$( uname -s | tr "[:upper:]" "[:lower:]")"
graal_ar="graalvm-community-jdk-${graal_ver}_${graal_os}-${graal_arch}_bin.tar.gz"
graal_dir_prefix="$(pwd)/graalvm-community-openjdk-${graal_ver}"
graal_url="https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${graal_ver}/${graal_ar}"

# Start fresh removing all prefixed directories
if [ -d "${graal_dir_prefix}"* ]
then
   rm -r "${graal_dir_prefix}"*
fi


# Download Graal
echo "[INFO] Downloading GraalVM from: ${graal_url}"
curl -L "${graal_url}" | tar -xz
graal_dir="`ls -d ${graal_dir_prefix}* | head -1`"

echo "[INFO] Inferring GraalVM Home as: ${graal_dir}"
graal_bin="${graal_dir}/bin"
if [ ! -d "${graal_bin}" ]
then
    graal_bin="${graal_dir}/Contents/Home/bin"
fi
# Check directory detection
if [ ! -d "${graal_bin}" ]
then
   echo "[ERROR] Failed to find GraalVM bin dir!"
   exit 1
fi

export PATH="${graal_bin}:${PATH}"
export GRAALVM_JAVA_HOME="$(dirname ${graal_bin})"

if [ -n "$GITHUB_ENV" ]
then
    echo PATH="${PATH}" >> $GITHUB_ENV
    echo GRAALVM_JAVA_HOME="${GRAALVM_JAVA_HOME}" >> $GITHUB_ENV
fi
